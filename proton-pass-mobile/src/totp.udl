[Error]
enum TOTPError {
    "NotTotpUri",
    "InvalidAuthority",
    "NoAuthority",
    "InvalidAlgorithm",
    "InvalidScheme",
    "URLParseError",
    "NoSecret",
    "EmptySecret",
    "NoQueries",
    "SecretParseError",
    "InvalidDigitsError",
    "InvalidPeriodError",
};

enum TOTPAlgorithm {
    "SHA1",
    "SHA256",
    "SHA512"
};

dictionary TOTP {
    string? label;
    string secret;
    string? issuer;
    TOTPAlgorithm? algorithm;
    u8? digits;
    u16? period;
};

interface TotpUriSanitizer {
    constructor();
    string uri_for_editing(string original_uri);
    [Throws=TOTPError]
    string uri_for_saving(string original_uri, string edited_uri);
};

interface TotpHandler {
    constructor();
    TOTPAlgorithm get_algorithm(TOTP totp);
    u8 get_digits(TOTP totp);
    u16 get_period(TOTP totp);
};

dictionary TotpTokenResult {
    TOTP totp;
    string token;
    u64 timestamp;
};

interface TotpTokenGenerator {
    constructor();
    [Throws=TOTPError]
    TotpTokenResult generate_token(string uri, u64 current_time);
};

interface TotpUriParser {
    constructor();
    [Throws=TOTPError]
    TOTP parse(string uri_string);
};