/// Callback that will be invoked when new TOTP codes are generated.
[Trait, WithForeign]
interface MobileTotpGeneratorCallback {
  void on_codes(sequence<AuthenticatorCodeResponse> codes);
};


/// Handle returned when calling start. It can be used to cancel the generator.
/// Make sure to cancel the generator when it's not used, in order not to leave a dangling generator.
[Trait, WithForeign]
interface MobileTotpGenerationHandle {
  void cancel();
};

/// Trait that the client must implement in order to provide the current time
[Trait, WithForeign]
interface MobileCurrentTimeProvider {
    u64 now();
};

/// Callback-based TOTP generator that allows the caller to subscribe to TOTP code changes, and
/// to get notified of changes in a configurable manner
interface MobileTotpGenerator {

  /// Create a new instance of the TOTP generator
  /// - period: how often the generator should check if the codes have changed. Time in ms
  /// - only_on_code_change: if true, only invoke the callback if the codes have changed. If false, it will always be called
  /// - current_time_provider: callback that will be invoked to get the current time
  [Throws=AuthenticatorError]
  constructor(u32 period, boolean only_on_code_change, MobileCurrentTimeProvider current_time);

  /// Start generating the codes.
  ///  - entries: Entries to generate codes for
  ///  - callback: callback that will be invoked when new codes are generated
  [Throws=AuthenticatorError]
  MobileTotpGenerationHandle start(sequence<AuthenticatorEntryModel> entries, MobileTotpGeneratorCallback callback);
};